<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JAX-RS on メモ帳</title><link>https://blog.sky-net.pw/tags/jax-rs/</link><description>Recent content in JAX-RS on メモ帳</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 14 Nov 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.sky-net.pw/tags/jax-rs/index.xml" rel="self" type="application/rss+xml"/><item><title>JAX-RSでJsonを返す</title><link>https://blog.sky-net.pw/post/jax-rs%E3%81%A7json%E3%82%92%E8%BF%94%E3%81%99/</link><pubDate>Mon, 14 Nov 2016 00:00:00 +0000</pubDate><guid>https://blog.sky-net.pw/post/jax-rs%E3%81%A7json%E3%82%92%E8%BF%94%E3%81%99/</guid><description>
はじめに JAX-RSで
1@Path(&amp;#34;test&amp;#34;) 2@GET 3public Map hoge(){ 4Map&amp;lt;String, String&amp;gt; data = new HashMap&amp;lt;&amp;gt;(); 5data.put(&amp;#34;key&amp;#34;, &amp;#34;value&amp;#34;); 6return data; 7} とかしたい時の話
依存性の追加 jersey-serverとjersey-jsonを追加する
追加してからメニューの実行-&amp;gt;プロジェクトをビルド（F11）する
pom.xmlに追記するか依存性の追加から
1&amp;lt;dependency&amp;gt; 2&amp;lt;groupId&amp;gt;com.sun.jersey&amp;lt;/groupId&amp;gt; 3&amp;lt;artifactId&amp;gt;jersey-server&amp;lt;/artifactId&amp;gt; 4&amp;lt;version&amp;gt;1.8&amp;lt;/version&amp;gt; 5&amp;lt;/dependency&amp;gt; 6&amp;lt;dependency&amp;gt; 7&amp;lt;groupId&amp;gt;com.sun.jersey&amp;lt;/groupId&amp;gt; 8&amp;lt;artifactId&amp;gt;jersey-json&amp;lt;/artifactId&amp;gt; 9&amp;lt;version&amp;gt;1.8&amp;lt;/version&amp;gt; 10&amp;lt;/dependency&amp;gt; コード 冒頭と同じだけど
WebApplication.java
1import javax.ws.rs.ApplicationPath; 2import javax.ws.rs.core.Application; 34@ApplicationPath(&amp;#34;/api&amp;#34;) 5public class WebApplication extends Application { 6} Hoge.java
1@Path(&amp;#34;/&amp;#34;) 2public class Hoge { 3@Path(&amp;#34;test&amp;#34;) 4@GET 5public Map hoge(){ 6Map&amp;lt;String, String&amp;gt; data = new HashMap&amp;lt;&amp;gt;(); 7data.put(&amp;#34;key&amp;#34;, &amp;#34;value&amp;#34;); 8return data; 9} 10} してテスト　おわり</description></item><item><title>JAX-RSを試す</title><link>https://blog.sky-net.pw/post/jax-rs%E3%82%92%E8%A9%A6%E3%81%99/</link><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid>https://blog.sky-net.pw/post/jax-rs%E3%82%92%E8%A9%A6%E3%81%99/</guid><description>
はじめに NetBeansでJAX-RSを動かすところまでメモ
環境 NetBeans 8.2 EE版
https://netbeans.org/downloads/?pagelang=ja GlassFish 4.1.1
上のに付属してるやつ プロジェクト作成 プロジェクトを選択
ファイル→新規プロジェクト→Maven→Webアプリケーション 名前と場所
設定値は適当に決める
この記事の値は全部デフォルト値で作成した時の話 設定
サーバー：GlassFish Server4.1.1
JavaEEバージョン：JavaEE 7 Web 終了押してプロジェクトを作成する
実装 左側のプロジェクトツリーのソース・パッケージの欄にある先ほど作成したパッケージ名の上で右クリック
新規→Javaクラス
WebApplicationとかで作成
中身を
1package com.mycompany.mavenproject1; 2import javax.ws.rs.ApplicationPath; 3import javax.ws.rs.core.Application; 45@ApplicationPath(&amp;#34;/&amp;#34;) 6public class MyWebApplication extends Application { 7} 適当にもう1個クラスを作成する
1package com.mycompany.mavenproject1; 23import javax.ws.rs.GET; 4import javax.ws.rs.Path; 56@Path(&amp;#34;test&amp;#34;) 7public class Rest { 8@GET 9public String helloWorld() { 10return &amp;#34;Hello World!!&amp;#34;; 11} 12} 実行 ここまで作ったら保存して実行する</description></item></channel></rss>